#!/usr/bin/env python
"""
Usage: cluster_stat2db.py -k SCHEMA [OPTION] CLUSTER_STAT_FILE

Option:
	CLUSTER_STAT_FILE is the file containing the cluster_stat.py results
	-z ..., --hostname=...	the hostname, zhoudb(default)
	-d ..., --dbname=...	the database name, graphdb(default)
	-k ..., --schema=...	which schema in the database
	-t ..., --target_table=...	which target table
	-s ..., --stop_id=...	the mcl_id indicating the stop sign, 0(default), no stop_id
	-n,	--new_table	target_table is new. (create it first)
	-c, --commit	commit the database transaction
	-r, --report	report the progress(a number)
	-h, --help	show this help
	
Examples:

	cluster_stat2db.py -k sc_yh60_splat_5 -t cluster_stat2 -n -c -r /tmp/part1

Description:
	A program to dump the stat file generated by cluster_stat.py into
	database.
"""

import sys, os, psycopg, getopt, csv

class cluster_stat2db:
	def __init__(self, hostname, dbname, schema, target_table, stop_id, new_table, report=0, needcommit=0, stat_fname=None):
		self.conn = psycopg.connect('host=%s dbname=%s'%(hostname, dbname))
		self.curs = self.conn.cursor()
		self.curs.execute("set search_path to %s"%schema)
		self.target_table = target_table
		self.stop_id = int(stop_id)
		self.new_table = int(new_table)
		self.report = int(report)
		self.needcommit = int(needcommit)
		self.stat_fname = stat_fname
		self.no_of_records = 0

	def run(self):
		if self.new_table:
			#first create the target_table
			try:
				self.curs.execute("create table %s(\
					cluster_stat_id	serial primary key,\
					mcl_id	integer,\
					leave_one_out	integer,\
					p_value_vector	float[],\
					connectivity	float)"%self.target_table)
			except:
				sys.stderr.write("Error occurred when creating table %s\n"%self.target_table)
				self.curs.execute("set search_path to %s"%schema)

		#open the file via the csv module
		if self.stat_fname:
			self.stat_f = csv.reader(open(self.stat_fname, 'r'), delimiter='\t')
		else:
			sys.stderr.write("No input file.\n")
			sys.exit(2)
		
		for row in self.stat_f:
			mcl_id = int(row[0])
			gene_no = int(row[1])
			p_value_vector = row[2]
			connectivity = float(row[3])
			if mcl_id == self.stop_id:
				#meet the stop mcl_id
				break
			self.curs.execute("insert into %s(mcl_id, leave_one_out, p_value_vector, connectivity)\
				values(%d, %d, ARRAY%s, %8.6f)"%(self.target_table, mcl_id, gene_no, p_value_vector, connectivity))
			self.no_of_records += 1
			if self.report and self.no_of_records%1000==0:
				sys.stderr.write('%s%d'%('\x08'*20, self.no_of_records))
		#the last report
		if self.report:
				sys.stderr.write('%s%d\n'%('\x08'*20, self.no_of_records))		
		#commit the whole transaction
		if self.needcommit:
			self.curs.execute("end")


if __name__ == '__main__':
	if len(sys.argv) == 1:
		print __doc__
		sys.exit(2)
		
	try:
		opts, args = getopt.getopt(sys.argv[1:], "hrz:d:k:t:s:nc", \
			["help", "report", "hostname=", "dbname=", "schema=", "target_table=", "stop_id=", "new_table", "commit"])
	except:
		print __doc__
		sys.exit(2)
	
	hostname = 'zhoudb'
	dbname = 'graphdb'
	schema = ''
	target_table = ''
	stop_id = 0
	new_table = 0
	commit = 0
	report = 0

	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print __doc__
			sys.exit(2)
		elif opt in ("-z", "--hostname"):
			hostname = arg
		elif opt in ("-d", "--dbname"):
			dbname = arg
		elif opt in ("-k", "--schema"):
			schema = arg
		elif opt in ("-t", "--target_table"):
			target_table = arg
		elif opt in ("-s", "--stop_id"):
			stop_id = int(arg)
		elif opt in ("-n", "--new_table"):
			new_table = 1
		elif opt in ("-c", "--commit"):
			commit = 1
		elif opt in ("-r", "--report"):
			report = 1

	if schema and target_table and len(args) == 1:
		instance = cluster_stat2db(hostname, dbname, schema, target_table, stop_id, new_table, report, commit, args[0])
		instance.run()

	else:
		print __doc__
		sys.exit(2)
