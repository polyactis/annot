09-30-05
binding_site2gene_id2mt_no.py:
	Construct gene_id2mt_no from binding_site. It translates prom_acc into
	gene_id(NCBI Gene) via gene2accession file. Also mt_no is the id of
	transfac.matrix. top_number is used to filter random hits, specific for
	one organism(learnt from Rhodes2005a). Perfect matrices are matrices
	of all top_number hits with 1.0 score and will be discarded.
	

DrawGenepresenceMatrix.py:
	Files in INPUTDIR are sorted by file_rename.py(datasets_sort).
        Program to draw a picture to show how genes are located among datasets.
        Hint: png is better than jpeg. jpeg has maximum 65500 pixels.
	Based on the figure,
	  1st. throw away datasets with too few genes
	  2nd. select a min gene_frequency for gene_table.py to filter genes
	The purpose is to keep the gene basis intact and complete so that the
	derived graph pattern's recurrence array is not an artifact of missing
	data.(missing could be misunderstood as unrelated)

DatasetsIdExchange.py:
	Program to exchange gene ids in datasets.

09-28-05
Schema2Darwin.py:
	Program to convert results of one schema into darwin format.
	Including TF, cluster, prediction from p_gene_table, gene_p_table, good_cluster_table
	and cluster_bs_table.

I. Annot pipeline(05-16-05, yh)

shell/mdb_output.sh
	call microarray/microarraydb.py to output datasets
shell/datasets_filter.sh
	annot/LogAffyDatasets.py to filter genes
	annot/MergeGenes.py to merge genes
	annot/bin/MpiGraphModeling.py to construct correlation graphs
database schema sql/graph.sql loadin on zhoudb
annot/gene_id_to_no.py to construct table graph.gene_id_to_no

shell/annot.sh
	shell/SchemaDatasetSetup.py to setup datasets and gph files
		shell/file_batch_move.py
		shell/file_rename.py
	shell/SchemaPreSetup.sh to setup database gene, go tables
		annot/gene_table.py
		annot/find_unknown_genes.py
		annot/go_informative_node.py
		annot/go_bioprocess.py
		annot/gene_go_functions.py
		annot/bin/graph_reorganize.py (transform gph files into gspan format)
		annot/prepare_gene_id2no.py
	shell/graph_merge.sh
		annot/graph_merge.py or graph_merge_lam.py
		annot/bin/graph/complete_cor_vector.py
		shell/clustering_test.sh(convert the summary graph(gspan format) into matrix format(netmine), it calls clustering_test.py)
		annot/bin/codense/haiyan_cor_vector2db.py(dump cor_vector and sig_vector files into database)
	[shell/netmine.sh]
		calculate #edges, #genes, #no_of_columns
		annot/bin/netmine_wrapper.py
		shell/cluster_stat.sh
		annot/bin/EdgeClusterFromCopathOutput.py
		shell/cluster_stat.sh
	[shell/fim_wrapper.sh (08-20-05)]
		annot/PreFimInput.py
		fim_closed(big memory node, node29)
		annot/MpiFromDatasetSignatureToPattern.py
		shell/cluster_stat.sh
		annot/bin/MpiCrackSplat.py
		shell/cluster_stat.sh

shell/cluster_stat.sh (parallel if MpiClusterGeneStat.py)
	annot/bin/codense/codense2db.py
	annot/bin/cluster_stat.py(ssh itself, R thread not allowed in qsub) or MpiClusterGeneStat.py
	annot/bin/gene_stat.py
	shell/cluster_stat2.sh
	annot/bin/PredictionFilterByClusterSize.py
	shell/cluster_stat2.sh

	shell/cluster_stat2.sh (big mem node due to p_gene_lm.py)
		shell/p_gene_lm.sh(p_gene_lm.py 1. needs R library(lapack.so) exported in .bash_profile 2. R thread not allowed, ssh itself to run p_gene_lm.sh)
		annot/bin/p_gene_analysis.py
		annot/bin/gene_p_map_redundancy.py
		shell/filter.sh
		#annot/bin/connectivity_original.py

		shell/filter.sh (no need to specify parallel)
			annot/bin/filter_clusters.py(threaded, not supported in qsub, ssh itself)
			annot/bin/MpiClusterBsStat.py (non-qsub parallel) or shell/mpibs_stat.sh(only for qsub, parallel embedded, 5 nodes, no need to specify in qsub; R thread, so ssh itself in mpibs_stat.sh)

II. Biclustering (05-14-05)
	MpiBiclustering.py
	CcFromBiclusteringOutput.py
	graph/biclustering.cc
	graph/cc_from_edge_list.cc
	graph/test_biclustering.py

III. Checking copath(netmine/netmind2nd) (06-07-05)
	graph/clustering.cc, almost = netmine
	graph/check_netmine2nd.py, check netmine2nd's 2nd-order graph, outputed with option --out2nd.

IV. datasets partitioning via tightClust (06-07-05)
	tightClust/tightClust
	PreprocessEdgeData.py
	MpiTightClust.py
	MTCBetterView.py
